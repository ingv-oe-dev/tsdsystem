{
    "swagger": "2.0",
    "info": {
        "description": "This is a Swagger UI web interface to test TSDSystem web service (REST). You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
        "version": "2.0.0",
        "title": "TSDSystem REST API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "carmelo.cassisi@ingv.it"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost",
    "basePath": "/github/tsdsystem/src/tsdws",
    "tags": [{
        "name": "token",
        "description": "Generation of authorization JWT tokens"
    }, {
        "name": "timeseries",
        "description": "Timeseries management"
    }, {
        "name": "channels",
        "description": "Station network management - channels"
    }, {
        "name": "sensors",
        "description": "Station network management - sensors"
    }, {
        "name": "sensortypes",
        "description": "Station network management - sensortypes"
    }, {
        "name": "nets",
        "description": "Station network management - nets"
    }, {
        "name": "sites",
        "description": "Station network management - sites"
    }, {
        "name": "owners",
        "description": "Station network management - owners"
    }, {
        "name": "users",
        "description": "Administration end-points for users management"
    }, {
        "name": "roles",
        "description": "Administration end-points for roles management"
    }, {
        "name": "permissions",
        "description": "Administration end-points for permissions setting"
    }],
    "schemes": [
        "http",
        "https"
    ],
    "paths": {
        "/token": {
            "post": {
                "tags": [
                    "token"
                ],
                "summary": "Retrieve an authorization token (JWT) using user credentials",
                "description": "",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "email",
                        "in": "formData",
                        "description": "Username (email)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "password",
                        "in": "formData",
                        "description": "Password",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "scope",
                        "in": "formData",
                        "description": "Scope of the authorization token",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "admin",
                                "all",
                                "channels",
                                "channels-edit",
                                "channels-read",
                                "nets",
                                "nets-edit",
                                "nets-read",
                                "owners",
                                "owners-edit",
                                "owners-read",
                                "sensors",
                                "sensors-edit",
                                "sensors-read",
                                "sensortypes",
                                "sensortypes-edit",
                                "sensortypes-read",
                                "sites",
                                "sites-edit",
                                "sites-read",
                                "timeseries",
                                "timeseries-edit",
                                "timeseries-read"
                            ],
                            "default": ""
                        }
                    },
                    {
                        "name": "validity_days",
                        "in": "formData",
                        "description": "Token validity (in days). Default 30 days.",
                        "default": 30,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "error": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/timeseries": {
            "get": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Find timeseries",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "id",
                        "in": "query",
                        "description": "Timeseries unique identifier (uuid)",
                        "type": "string",
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Timeseries name",
                        "type": "string"
                    },
                    {
                        "name": "schema",
                        "in": "query",
                        "description": "Timeseries schema (catalogue name)",
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "description": "Find this string into metadata",
                        "type": "string"
                    },
                    {
                        "name": "channel_id",
                        "in": "query",
                        "description": "Timeseries mapped to this Channel ID",
                        "type": "integer"
                    },
                    {
                        "name": "exact_match",
                        "in": "query",
                        "description": "Use exact match when filtering by query parameters",
                        "type": "boolean"
                    },
                    {
                        "name": "listCol",
                        "in": "query",
                        "description": "Show timeseries column names list in the response",
                        "type": "boolean"
                    },
                    {
                        "name": "showColDefs",
                        "in": "query",
                        "description": "Show timeseries columns definitions in the response",
                        "type": "boolean"
                    },
                    {
                        "name": "showMapping",
                        "in": "query",
                        "description": "Add timeseries mapped channels list in the response",
                        "type": "boolean"
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "How to sort result",
                        "type": "string",
                        "default": "name",
                        "enum": ["id", "name", "sampling"]
                    },
                    {
                        "name": "public",
                        "in": "query",
                        "description": "If not set, list all timeseries. If true, list only public timeseries (**no authorization required**), else only non-public timeseries.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Register a timeseries",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Timeseries"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/timeseries/{id}": {
            "get": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Get info about timeseries by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries unique identifier (uuid)",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }, {
                    "name": "listCol",
                    "in": "query",
                    "description": "Show timeseries column names list in the response",
                    "type": "boolean"
                }, {
                    "name": "showColDefs",
                    "in": "query",
                    "description": "Show timeseries columns definitions in the response",
                    "type": "boolean"
                }, {
                    "name": "showMapping",
                    "in": "query",
                    "description": "Add timeseries mapped channels list in the response",
                    "type": "boolean"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Update timeseries info by ID",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries unique identifier (uuid)",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input to update a timeseries registration",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Timeseries_patch"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "No significant update",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "404": {
                        "description": "Record not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/timeseries/{id}/values": {
            "get": {
                "tags": ["timeseries"],
                "summary": "Get timeseries values by ID",
                "description": "Return values from timeseries identified by {id}, using filters and transformation indicated by parameters into querystring. **All referenced times are UTC (Coordinated Universal Time)**",
                "produces": ["application/json"],
                "parameters": [{
                        "name": "id",
                        "in": "path",
                        "description": "Timeseries id",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                        "minLength": 1,
                        "example": "b0c77d19-5b6e-4162-9aa0-1073c48b9de0"
                    },
                    {
                        "name": "starttime",
                        "in": "query",
                        "description": "Start time. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "endtime",
                        "in": "query",
                        "description": "End time. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "time_bucket",
                        "in": "query",
                        "description": "Defines interval for values sampling <format: [0-9]+ second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s]>",
                        "type": "string"
                    },
                    {
                        "name": "aggregate",
                        "in": "query",
                        "description": "Aggregation function on the selected time bucket. Must be a value in the following list: ['AVG','MEDIAN','COUNT','MAX','MIN','SUM']",
                        "type": "string",
                        "default": "AVG",
                        "enum": ["AVG", "MEDIAN", "COUNT", "MAX", "MIN", "SUM"],
                        "options": {
                            "enum_titles": ["AVG", "MEDIAN", "COUNT", "MAX", "MIN", "SUM"]
                        }
                    },
                    {
                        "name": "gain",
                        "in": "query",
                        "description": "Multiply all timeseries samples with this value (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Add this value to all timeseries samples (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "minthreshold",
                        "in": "query",
                        "description": "Filter all samples having values greater than the selected threshold (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "maxthreshold",
                        "in": "query",
                        "description": "Filter all samples having values less than the selected threshold (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "columns",
                        "in": "query",
                        "description": "List of columns names",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "columns_aggregate",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Aggregation function on the selected time bucket. Must be a value in the following list: ['AVG','MEDIAN','COUNT','MAX','MIN','SUM']",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "columns_gain",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Multiply all timeseries samples with this value (rewrite the general 'gain' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "columns_offset",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Add this value to all timeseries samples (rewrite the general 'offset' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "columns_minthreshold",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Filter all samples having values greater than the selected threshold (rewrite the general 'minthreshold' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "columns_maxthreshold",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Filter all samples having values less than the selected threshold (rewrite the general 'maxthreshold' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "timeformat",
                        "in": "query",
                        "description": "Sample time format. Default 'ISO 8601' [https://www.w3.org/TR/NOTE-datetime].",
                        "type": "string",
                        "default": "ISO8601",
                        "enum": ["ISO8601", "UNIX"],
                        "options": {
                            "enum_titles": ["ISO 8601", "Unix timestamp"]
                        }
                    },
                    {
                        "name": "transpose",
                        "in": "query",
                        "description": "Default false. Each data column is represented by an array under the 'column name' section. If true, data consists of an array where each sample is an object with all column values.",
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseTSValues"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Insert values for a timeseries",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries id",
                    "required": true,
                    "type": "string",
                    "format": "uuid",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "minLength": 1,
                    "example": "b0c77d19-5b6e-4162-9aa0-1073c48b9de0"
                }, {
                    "name": "insert",
                    "in": "query",
                    "description": "Insertion mode.\nIGNORE: Values corresponding to already stored timestamp will be ignored.\nUPDATE: Values corresponding to already stored timestamp will be updated",
                    "type": "string",
                    "enum": ["IGNORE", "UPDATE"],
                    "default": "IGNORE"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Timeseries_values_post"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "202": {
                        "description": "Values inserted, but not update timeseries 'last_time' info",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/channels": {
            "get": {
                "tags": [
                    "channels"
                ],
                "summary": "Find channels",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "id",
                        "in": "query",
                        "description": "Channel unique identifier",
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Channel name",
                        "type": "string"
                    },
                    {
                        "name": "sensor_id",
                        "in": "query",
                        "description": "ID of the sensor whom the channel belongs to",
                        "type": "integer"
                    },
                    {
                        "name": "sensor_name",
                        "in": "query",
                        "description": "Name of the sensor whom the channel belongs to",
                        "type": "string"
                    },
                    {
                        "name": "sensortype_id",
                        "in": "query",
                        "description": "ID of the sensortype of the channel",
                        "type": "integer"
                    },
                    {
                        "name": "sensortype_name",
                        "in": "query",
                        "description": "Name of the sensortype of the channel",
                        "type": "string"
                    },
                    {
                        "name": "net_id",
                        "in": "query",
                        "description": "ID of the net whom the channel refers to",
                        "type": "integer"
                    },
                    {
                        "name": "net_name",
                        "in": "query",
                        "description": "Name of the net whom the channel refers to",
                        "type": "string"
                    },
                    {
                        "name": "start_datetime",
                        "in": "query",
                        "description": "Acquisition start datetime. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "end_datetime",
                        "in": "query",
                        "description": "Acquisition end datetime. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "description": "Find this string into channel's metadata",
                        "type": "string"
                    },
                    {
                        "name": "info",
                        "in": "query",
                        "description": "Find this string into channel's additional info",
                        "type": "string"
                    },
                    {
                        "name": "exact_match",
                        "in": "query",
                        "description": "Use exact match when filtering by query parameters",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "channels"
                ],
                "summary": "Register a channel",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Channel"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/channels/{id}": {
            "get": {
                "tags": [
                    "channels"
                ],
                "summary": "Info about a channel by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Channel ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "channels"
                ],
                "summary": "Update channel data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Channel ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Channel"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "channels"
                ],
                "summary": "Delete a channel by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Channel ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/channels/{id}/clone": {
            "post": {
                "tags": [
                    "channels"
                ],
                "summary": "Duplicate a channel by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Channel ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "clone_name",
                    "in": "query",
                    "description": "Clone channel name",
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/channels/{id}/timeseries": {
            "get": {
                "tags": [
                    "channels", "timeseries"
                ],
                "summary": "List all timeseries referring to a channel by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "id",
                        "in": "path",
                        "description": "Channel ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "listCol",
                        "in": "query",
                        "description": "Show timeseries column names list in the response",
                        "type": "boolean"
                    },
                    {
                        "name": "showColDefs",
                        "in": "query",
                        "description": "Show timeseries columns definitions in the response",
                        "type": "boolean"
                    },
                    {
                        "name": "showMapping",
                        "in": "query",
                        "description": "Add timeseries mapped channels list in the response",
                        "type": "boolean"
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "How to sort result",
                        "type": "string",
                        "default": "name",
                        "enum": ["id", "name", "sampling"]
                    },
                    {
                        "name": "public",
                        "in": "query",
                        "description": "If not set, list all timeseries. If true, list only public timeseries (**no authorization required**), else only non-public timeseries.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensors": {
            "get": {
                "tags": [
                    "sensors"
                ],
                "summary": "Find sensors",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Sensor unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Sensor name",
                    "type": "string"
                }, {
                    "name": "sensortype_id",
                    "in": "query",
                    "description": "ID of the sensortype",
                    "type": "integer"
                }, {
                    "name": "sensortype_name",
                    "in": "query",
                    "description": "Sensortype name",
                    "type": "string"
                }, {
                    "name": "net_id",
                    "in": "query",
                    "description": "ID of the net whom the sensor refers to",
                    "type": "integer"
                }, {
                    "name": "net_name",
                    "in": "query",
                    "description": "Name of the net whom the sensor refers to",
                    "type": "string"
                }, {
                    "name": "site_id",
                    "in": "query",
                    "description": "ID of the site whom the sensor belongs to",
                    "type": "integer"
                }, {
                    "name": "site_name",
                    "in": "query",
                    "description": "Name of the site whom the sensor belongs to",
                    "type": "string"
                }, {
                    "name": "start_datetime",
                    "in": "query",
                    "description": "Current instance start datetime. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                }, {
                    "name": "end_datetime",
                    "in": "query",
                    "description": "Current instance end datetime. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                }, {
                    "name": "custom_props",
                    "in": "query",
                    "description": "Find this string into sensors's additional info",
                    "type": "string"
                }, {
                    "name": "minlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify southern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify northern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify western boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify eastern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "latitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central latitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "longitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central longitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name", "end_datetime"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "sensors"
                ],
                "summary": "Register a sensor",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensor"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensors/{id}": {
            "get": {
                "tags": [
                    "sensors"
                ],
                "summary": "Info about a sensor by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensor ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "sensors"
                ],
                "summary": "Update sensor data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensor ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensor"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "sensors"
                ],
                "summary": "Delete a sensor by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensor ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensors/{id}/channels": {
            "get": {
                "tags": [
                    "channels", "sensors"
                ],
                "summary": "List all channels referring to a sensor by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensor ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortypes": {
            "get": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Find sensortypes",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Sensortype unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Sensortype name",
                    "type": "string"
                }, {
                    "name": "json_schema",
                    "in": "query",
                    "description": "Find this string into sensortype JSON schema",
                    "type": "string"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Register an sensortype",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensortype"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortypes/{id}": {
            "get": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Info about a sensortype by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Update sensortypes data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensortype"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Delete a sensortype by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortypes/{id}/channels": {
            "get": {
                "tags": [
                    "channels", "sensortypes"
                ],
                "summary": "List all channels belonging to a sensortype by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortypes/{id}/sensors": {
            "get": {
                "tags": [
                    "sensors", "sensortypes"
                ],
                "summary": "List all current sensors belonging to a sensortype by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/nets": {
            "get": {
                "tags": [
                    "nets"
                ],
                "summary": "Find nets",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Net unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Net name",
                    "type": "string"
                }, {
                    "name": "owner_id",
                    "in": "query",
                    "description": "ID of the owner",
                    "type": "integer"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "nets"
                ],
                "summary": "Register a net",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Net"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/nets/{id}": {
            "get": {
                "tags": [
                    "nets"
                ],
                "summary": "Info about a net by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "nets"
                ],
                "summary": "Update net data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Net"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "nets"
                ],
                "summary": "Delete a net by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/nets/{id}/sensors": {
            "get": {
                "tags": [
                    "nets", "sensors"
                ],
                "summary": "List all sensors belonging to a net by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sites": {
            "get": {
                "tags": [
                    "sites"
                ],
                "summary": "Find sites",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Site unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Site name",
                    "type": "string"
                }, {
                    "name": "info",
                    "in": "query",
                    "description": "Find this string into sites's additional info",
                    "type": "string"
                }, {
                    "name": "minlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify southern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify northern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify western boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify eastern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "latitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central latitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "longitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central longitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "sites"
                ],
                "summary": "Register a site",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Site"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sites/{id}": {
            "get": {
                "tags": [
                    "sites"
                ],
                "summary": "Info about a site by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "sites"
                ],
                "summary": "Update site data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Site"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "sites"
                ],
                "summary": "Delete a site by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sites/{id}/sensors": {
            "get": {
                "tags": [
                    "sites", "sensors"
                ],
                "summary": "List all sensors belonging to a site by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/owners": {
            "get": {
                "tags": [
                    "owners"
                ],
                "summary": "Find owners",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Owner unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Net name",
                    "type": "string"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "owners"
                ],
                "summary": "Register an owner",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Owner"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/owners/{id}": {
            "get": {
                "tags": [
                    "owners"
                ],
                "summary": "Info about an owner by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "owners"
                ],
                "summary": "Update owner data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Owner"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "owners"
                ],
                "summary": "Delete an owner by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/owners/{id}/nets": {
            "get": {
                "tags": [
                    "nets", "owners"
                ],
                "summary": "List all nets belonging to an owner by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "description": "You can filter list by specifing ID, email. The result show records of registered (and confirmed) users only",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "email",
                    "in": "query",
                    "description": "User email",
                    "type": "string"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Info about user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}/permissions": {
            "get": {
                "tags": ["users", "permissions"],
                "summary": "Get permissions issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "merge_with_role_permissions",
                    "in": "query",
                    "description": "Merge with permissions of the user's roles",
                    "type": "boolean",
                    "default": true
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": ["users", "permissions"],
                "summary": "Define a new permission for a specific user identified by ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "active",
                    "in": "query",
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Permission_no_role_id"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                }
            },
            "delete": {
                "tags": ["users", "permissions"],
                "summary": "Remove all permissions for a user by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}/roles": {
            "get": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Get roles issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}/roles/{role_id}": {
            "get": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Get a role by ID issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "role_id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Assign a Role by ID to a User by ID (or update if the couple [Role ID, User ID] exists)",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "role_id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "priority",
                    "in": "query",
                    "description": "Assign a priority",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Remove a mapping between a Role and a User defined by the couple [Role ID, User ID]",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "role_id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "List roles",
                "description": "You can filter list by specifing ID, name or description",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Role name",
                    "type": "string"
                }, {
                    "name": "description",
                    "in": "query",
                    "description": "Role description",
                    "type": "string"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Create a new role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "title": "Name",
                                "description": "Name",
                                "type": "string",
                                "minLength": 1,
                                "required": true
                            },
                            "description": {
                                "title": "Description",
                                "type": "string"
                            }
                        }
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Info about a role by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "roles"
                ],
                "summary": "Update name and/or description of a role by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "title": "Name",
                                "description": "Name",
                                "type": "string",
                                "minLength": 1
                            },
                            "description": {
                                "title": "Description",
                                "type": "string"
                            }
                        }
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Delete a role by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}/members": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get all users belonging to a role by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}/members/{member_id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get a role by ID issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Assign a Role by ID to a User by ID (or update if the couple [Role ID, User ID] exists)",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "priority",
                    "in": "query",
                    "description": "Assign a priority",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Remove a mapping between a Role and a User defined by the couple [Role ID, User ID]",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}/permissions": {
            "get": {
                "tags": ["roles", "permissions"],
                "summary": "Get permissions for a role by ID",
                "description": "Alternative of **/permissions/{role_type}/{role_id}**, where **{role_type}** = 'role' and **{role_id}** = {id}",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": ["roles", "permissions"],
                "summary": "Define a new permission for a specific role identified by ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "active",
                    "in": "query",
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Permission_no_role_id"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                }
            },
            "delete": {
                "tags": ["roles", "permissions"],
                "summary": "Remove all permissions for a role by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/mapping": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get all mappings between roles and users",
                "description": "You can filter list by specifing a Role ID, a User ID or the Priority (if a User belongs to more than one roles).",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "role_id",
                    "in": "query",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "query",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "priority",
                    "in": "query",
                    "description": "Priority of the role",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Assign a Role by ID to a User by ID (or update if the couple [Role ID, User ID] exists)",
                "description": "You have to define a Role ID, a User ID and a Priority (if a User belongs to more than one roles).",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "role_id": {
                                "title": "Role ID",
                                "type": "integer",
                                "required": true,
                                "format": "int64"
                            },
                            "member_id": {
                                "title": "User ID",
                                "type": "integer",
                                "required": true,
                                "format": "int64"
                            },
                            "priority": {
                                "title": "Priority",
                                "required": false,
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Remove a mapping between a Role and a User defined by the couple [Role ID, User ID]",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input to remove a mapping",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "role_id": {
                                "title": "Role ID",
                                "type": "integer",
                                "format": "int64",
                                "required": true
                            },
                            "member_id": {
                                "title": "User ID",
                                "type": "integer",
                                "format": "int64",
                                "required": true
                            }
                        }
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/permissions/{role_type}": {
            "get": {
                "tags": ["permissions"],
                "summary": "List all defined permissions by role type",
                "produces": ["application/json"],
                "parameters": [{
                    "name": "role_type",
                    "in": "path",
                    "description": "Role type",
                    "required": true,
                    "type": "string",
                    "enum": ["member", "role"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                }
            },
            "delete": {
                "tags": ["permissions"],
                "summary": "Remove all permissions for a {role_type} in [member | role]",
                "produces": ["application/json"],
                "parameters": [{
                    "name": "role_type",
                    "in": "path",
                    "description": "Role type",
                    "required": true,
                    "type": "string",
                    "enum": ["member", "role"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                }
            }
        },
        "/permissions/{role_type}/{role_id}": {
            "get": {
                "tags": ["permissions"],
                "summary": "Get permissions by a specific role type with a specific role ID",
                "produces": ["application/json"],
                "parameters": [{
                        "name": "role_type",
                        "in": "path",
                        "description": "Role type",
                        "required": true,
                        "type": "string",
                        "enum": ["member", "role"]
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                }
            },
            "delete": {
                "tags": ["permissions"],
                "summary": "Remove all permissions by a specific role type with a specific role ID",
                "produces": ["application/json"],
                "parameters": [{
                        "name": "role_type",
                        "in": "path",
                        "description": "Role type",
                        "required": true,
                        "type": "string",
                        "enum": ["member", "role"]
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "name": "Authorization",
            "in": "header"
        }
    },
    "definitions": {
        "ApiResponse": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "object"
                },
                "data": {
                    "type": "object"
                },
                "error": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ApiResponseGet": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "object"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "error": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "records": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ApiResponseTSValues": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "object"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "error": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "integer"
                },
                "records": {
                    "type": "integer"
                },
                "additionalInfo": {
                    "type": "object"
                }
            }
        },
        "Timeseries": {
            "type": "object",
            "required": ["schema", "name"],
            "additionalProperties": false,
            "properties": {
                "schema": {
                    "title": "Schema",
                    "description": "The name of the schema where timeseries tables will be archived",
                    "type": "string",
                    "minLength": 1,
                    "default": "test",
                    "required": true
                },
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1,
                    "default": "test",
                    "required": true
                },
                "sampling": {
                    "title": "Sampling",
                    "description": "Timeseries values sampling in seconds",
                    "type": "number",
                    "minimum": 1,
                    "default": 60
                },
                "columns": {
                    "title": "Columns",
                    "description": "List of all the measurements of the timeseries",
                    "type": "array",
                    "format": "table",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "title": "Name",
                                "minLength": 1,
                                "description": "Table column name",
                                "default": "value"
                            },
                            "type": {
                                "title": "Field type",
                                "description": "Table column type",
                                "type": "string",
                                "default": "double precision",
                                "enum": ["smallint", "integer", "double precision"],
                                "options": {
                                    "enum_titles": ["smallint (2 bytes)", "integer (4 bytes)", "double precision (8 bytes)"]
                                }
                            }
                        }
                    }
                },
                "mapping": {
                    "title": "Mapping",
                    "description": "List of all channels related to the timeseries",
                    "type": "object",
                    "required": ["channel_id", "add_channel_mode", "channel_list"],
                    "format": "grid-strict",
                    "properties": {
                        "channel_id": {
                            "title": "Channel IDs",
                            "description": "ID list of channels to which the timeseries is related.",
                            "type": "array",
                            "format": "table",
                            "uniqueItems": true,
                            "items": {
                                "type": "integer"
                            },
                            "options": {
                                "grid_columns": 5
                            },
                            "default": []
                        }
                    }
                },
                "metadata": {
                    "title": "Metadata",
                    "description": "Metadata for the timeseries",
                    "type": "object",
                    "additionalProperties": true
                },
                "public": {
                    "title": "Public",
                    "description": "If not set, list all timeseries. If true, list only public timeseries (**no authorization required**), else only non-public timeseries.",
                    "type": "boolean"
                }
            }
        },
        "Timeseries_patch": {
            "type": "object",
            "required": ["schema", "name"],
            "additionalProperties": false,
            "properties": {
                "metadata": {
                    "title": "Metadata",
                    "description": "Metadata for the timeseries",
                    "type": "object",
                    "additionalProperties": true
                },
                "sampling": {
                    "title": "Sampling",
                    "description": "Timeseries values sampling in seconds",
                    "type": "number",
                    "minimum": 1,
                    "default": 60
                },
                "mapping": {
                    "title": "Mapping",
                    "description": "List of all channels related to the timeseries",
                    "type": "object",
                    "required": ["channel_id", "add_channel_mode", "channel_list"],
                    "format": "grid-strict",
                    "properties": {
                        "channel_id": {
                            "title": "Channel IDs",
                            "description": "ID list of channels to which the timeseries is related.",
                            "type": "array",
                            "format": "table",
                            "uniqueItems": true,
                            "items": {
                                "type": "integer"
                            },
                            "options": {
                                "grid_columns": 5
                            },
                            "default": []
                        },
                        "force": {
                            "title": "Force update",
                            "description": "Delete old mapping list and replace with the channel_id list",
                            "type": "boolean",
                            "default": false
                        }
                    }
                },
                "public": {
                    "title": "Public",
                    "description": "If not set, list all timeseries. If true, list only public timeseries (**no authorization required**), else only non-public timeseries.",
                    "type": "boolean"
                }
            }
        },
        "Timeseries_values_post": {
            "type": "object",
            "required": ["schema", "name"],
            "additionalProperties": false,
            "properties": {
                "columns": {
                    "title": "Columns",
                    "description": "Ordered list of columns names. **It has to include the _time_ column**",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "default": "time"
                    },
                    "minItems": 2,
                    "uniqueItems": true,
                    "required": true,
                    "example": ["time", "value"]
                },
                "data": {
                    "title": "Data",
                    "description": "Each record follow the order defined in _Columns_",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {}
                    },
                    "required": true,
                    "example": [
                        ["2022-10-28 15:26:00", 100],
                        ["2022-10-28 15:27:00", 10],
                        ["2022-10-28 15:28:00", null]
                    ]
                }
            }
        },
        "Channel": {
            "type": "object",
            "required": ["sensor_id", "name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "sensor_id": {
                    "title": "Sensor",
                    "description": "Sensor to which the channel belongs",
                    "type": "integer",
                    "minimum": 1
                },
                "sensortype_id": {
                    "title": "Sensortype",
                    "description": "The sensor type",
                    "type": "integer",
                    "minimum": 1
                },
                "metadata": {
                    "title": "Metadata",
                    "description": "Sensortype properties (metadata)",
                    "type": "object"
                },
                "start_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "Start Datetime",
                    "description": "Standard ISO8601 datetime UTC"
                },
                "end_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "End Datetime",
                    "description": "Standard ISO8601 datetime UTC"
                },
                "info": {
                    "title": "Info",
                    "description": "Additional info of the channel (e.g.: digitizer)",
                    "type": "object",
                    "properties": {
                        "digitizer": {
                            "title": "Digitizer",
                            "description": "Digitizer properties",
                            "type": "object"
                        },
                        "other": {
                            "title": "Additional properties",
                            "description": "Additional properties",
                            "type": "object"
                        }
                    }
                }
            }
        },
        "Sensor": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "lat": {
                    "title": "Latitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "lon": {
                    "title": "Longitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "quote": {
                    "title": "Quote",
                    "description": "In meters",
                    "type": "number",
                    "format": "double"
                },
                "net_id": {
                    "title": "Net ID",
                    "description": "ID of the net whom the channel refers to",
                    "type": "integer"
                },
                "site_id": {
                    "title": "Site ID",
                    "description": "ID of the site whom the channel belongs to",
                    "type": "integer"
                },
                "custom_props": {
                    "title": "Additional properties",
                    "description": "Additional properties",
                    "type": "object"
                }
            }
        },
        "Sensortype": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "json_schema": {
                    "title": "JSON schema",
                    "description": "JSON schema for sensortype properties",
                    "type": "object"
                }
            }
        },
        "Net": {
            "type": "object",
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "owner_id": {
                    "title": "Owner",
                    "description": "Set the onwer of the net",
                    "type": "integer"
                }
            }
        },
        "Site": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "lat": {
                    "title": "Latitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "lon": {
                    "title": "Longitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "quote": {
                    "title": "Quote",
                    "description": "In meters",
                    "type": "number",
                    "format": "double"
                },
                "info": {
                    "title": "Additional properties",
                    "description": "Additional properties",
                    "type": "object"
                }
            }
        },
        "Owner": {
            "type": "object",
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "registered": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        },
        "Permission": {
            "type": "object",
            "required": ["role_id", "settings"],
            "properties": {
                "role_id": {
                    "description": "Role ID",
                    "type": "integer"
                },
                "settings": {
                    "$ref": "../../json-schemas/resource_permissions_swagger.json"
                },
                "active": {
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "Permission_no_role_id": {
            "type": "object",
            "required": ["settings"],
            "properties": {
                "settings": {
                    "$ref": "../../json-schemas/resource_permissions_swagger.json"
                },
                "active": {
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}