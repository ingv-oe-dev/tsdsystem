{
    "swagger": "2.0",
    "info": {
        "description": "This is a Swagger UI web interface to test TSDSystem web service (REST). You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
        "version": "2.0.0",
        "title": "TSDSystem REST API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "carmelo.cassisi@ingv.it"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/tsdws",
    "tags": [{
        "name": "token",
        "description": "Generation of authorization JWT tokens"
    }, {
        "name": "timeseries",
        "description": "Timeseries management"
    }, {
        "name": "channels",
        "description": "Station network management - channels"
    }, {
        "name": "sensors",
        "description": "Station network management - sensors"
    }, {
        "name": "sensortypes",
        "description": "Station network management - sensortypes"
    }, {
        "name": "sensortype_categories",
        "description": "Station network management - sensortype categories"
    }, {
        "name": "digitizertypes",
        "description": "Station network management - digitizertypes"
    }, {
        "name": "digitizers",
        "description": "Station network management - digitizers"
    }, {
        "name": "stations",
        "description": "Station network management - stations"
    }, {
        "name": "nets",
        "description": "Station network management - nets"
    }, {
        "name": "sites",
        "description": "Station network management - sites"
    }, {
        "name": "owners",
        "description": "Station network management - owners"
    }, {
        "name": "users",
        "description": "Administration end-points for users management"
    }, {
        "name": "roles",
        "description": "Administration end-points for roles management"
    }, {
        "name": "permissions",
        "description": "Administration end-points for permissions setting"
    }, {
        "name": "about",
        "description": "Get information about the web service"
    }],
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/token": {
            "post": {
                "tags": [
                    "token"
                ],
                "summary": "Retrieve an authorization token (JWT) using user credentials",
                "description": "",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "email",
                        "in": "formData",
                        "description": "Username (email)",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "password",
                        "in": "formData",
                        "description": "Password",
                        "format": "password",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "scope",
                        "in": "formData",
                        "description": "Scope of the authorization token",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "admin",
                                "all",
                                "channels",
                                "channels-edit",
                                "channels-read",
                                "nets",
                                "nets-edit",
                                "nets-read",
                                "owners",
                                "owners-edit",
                                "owners-read",
                                "stations",
                                "stations-edit",
                                "stations-read",
                                "sensors",
                                "sensors-edit",
                                "sensors-read",
                                "sensortypes",
                                "sensortypes-edit",
                                "sensortypes-read",
                                "sites",
                                "sites-edit",
                                "sites-read",
                                "timeseries",
                                "timeseries-edit",
                                "timeseries-read"
                            ],
                            "default": ""
                        }
                    },
                    {
                        "name": "validity_days",
                        "in": "formData",
                        "description": "Token validity (in days). Default 30 days.",
                        "default": 30,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "error": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "token"
                ],
                "summary": "Flush invalid tokens from DB (**only admin**)",
                "description": "**Action granted only to administrators**",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/timeseries": {
            "get": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Find timeseries",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "id",
                        "in": "query",
                        "description": "Timeseries unique identifier (uuid)",
                        "type": "string",
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Timeseries name",
                        "type": "string"
                    },
                    {
                        "name": "schema",
                        "in": "query",
                        "description": "Timeseries schema (catalogue name)",
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "description": "Find this string into metadata",
                        "type": "string"
                    },
                    {
                        "name": "channel_id",
                        "in": "query",
                        "description": "Timeseries mapped to this Channel ID",
                        "type": "integer"
                    },
                    {
                        "name": "exact_match",
                        "in": "query",
                        "description": "Use exact match when filtering by query parameters",
                        "type": "boolean"
                    },
                    {
                        "name": "listCol",
                        "in": "query",
                        "description": "Show timeseries column names list in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "showColDefs",
                        "in": "query",
                        "description": "Show timeseries columns definitions in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "showMapping",
                        "in": "query",
                        "description": "Add timeseries mapped channels list in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "showFirstMapping",
                        "in": "query",
                        "description": "Add list of first net/sensor/channel id mapped to the timeseries in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "How to sort result",
                        "type": "string",
                        "default": "name",
                        "enum": ["id", "name", "sampling", "id.desc", "name.desc", "sampling.desc"]
                    },
                    {
                        "name": "public",
                        "in": "query",
                        "description": "If not set, list all timeseries. If true, list only public timeseries (**no authorization required**), else only non-public timeseries.",
                        "type": "boolean"
                    },
                    {
                        "name": "station_id",
                        "in": "query",
                        "description": "If set, it returns a key list of timeseries_id linked to the station identified by this value. For each timeseries_id the list of channels mapping info is provided.",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Register a timeseries",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Timeseries"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/timeseries/{id}": {
            "get": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Get info about timeseries by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Timeseries unique identifier (uuid)",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }, {
                    "name": "listCol",
                    "in": "query",
                    "description": "Show timeseries column names list in the response. **Only when 'id' input is specified**",
                    "type": "boolean"
                }, {
                    "name": "showColDefs",
                    "in": "query",
                    "description": "Show timeseries columns definitions in the response. **Only when 'id' input is specified**",
                    "type": "boolean"
                }, {
                    "name": "showMapping",
                    "in": "query",
                    "description": "Add timeseries mapped channels list in the response. **Only when 'id' input is specified**",
                    "type": "boolean"
                }, {
                    "name": "showFirstMapping",
                    "in": "query",
                    "description": "Add list of first net/sensor/channel id mapped to the timeseries in the response. **Only when 'id' input is specified**",
                    "type": "boolean"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Update timeseries info by ID",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries unique identifier (uuid)",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input to update a timeseries registration",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Timeseries_patch"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "No significant update",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "404": {
                        "description": "Record not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Delete a timeseries by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries ID",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "409": {
                        "description": "Conflict - Error"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/timeseries/{id}/update_stats": {
            "patch": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Update timeseries 'first_time', 'last_time', 'n_samples' by ID",
                "description": "Automatically retrieve min() and max() time from values stored for the timeseries defined by ID and update the relative fields record.<br>The updated number of samples is ESTIMATED, NOT EXACT.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries unique identifier (uuid)",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "No significant update",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "404": {
                        "description": "Record not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/timeseries/{id}/values": {
            "get": {
                "tags": ["timeseries"],
                "summary": "Get timeseries values by ID",
                "description": "Return values from timeseries identified by {id}, using filters and transformation indicated by parameters into querystring. **All referenced times are UTC (Coordinated Universal Time)**",
                "produces": ["application/json"],
                "parameters": [{
                        "name": "id",
                        "in": "path",
                        "description": "Timeseries id",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                        "minLength": 1,
                        "example": "b0c77d19-5b6e-4162-9aa0-1073c48b9de0"
                    },
                    {
                        "name": "starttime",
                        "in": "query",
                        "description": "Start time. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "endtime",
                        "in": "query",
                        "description": "End time. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "time_bucket",
                        "in": "query",
                        "description": "Defines interval for values sampling <format: [0-9]+ second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s]>",
                        "type": "string"
                    },
                    {
                        "name": "aggregate",
                        "in": "query",
                        "description": "Aggregation function on the selected time bucket. Must be a value in the following list: ['AVG','MEDIAN','COUNT','MAX','MIN','SUM']",
                        "type": "string",
                        "default": "AVG",
                        "enum": ["AVG", "MEDIAN", "COUNT", "MAX", "MIN", "SUM"],
                        "options": {
                            "enum_titles": ["AVG", "MEDIAN", "COUNT", "MAX", "MIN", "SUM"]
                        }
                    },
                    {
                        "name": "gain",
                        "in": "query",
                        "description": "Multiply all timeseries samples with this value (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Add this value to all timeseries samples (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "minthreshold",
                        "in": "query",
                        "description": "Filter all samples having values greater than the selected threshold (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "maxthreshold",
                        "in": "query",
                        "description": "Filter all samples having values less than the selected threshold (applied to each column value for multiple columns timeseries)",
                        "type": "number"
                    },
                    {
                        "name": "columns",
                        "in": "query",
                        "description": "List of columns names",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "columns_aggregate",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Aggregation function on the selected time bucket. Must be a value in the following list: ['AVG','MEDIAN','COUNT','MAX','MIN','SUM']",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "columns_gain",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Multiply all timeseries samples with this value (rewrite the general 'gain' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "columns_offset",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Add this value to all timeseries samples (rewrite the general 'offset' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "columns_minthreshold",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Filter all samples having values greater than the selected threshold (rewrite the general 'minthreshold' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "columns_maxthreshold",
                        "in": "query",
                        "description": "**SPECIFIC FOR COLUMNS (this list follows the ordering chosen for 'columns')**. Filter all samples having values less than the selected threshold (rewrite the general 'maxthreshold' value if specified for the column)",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "timeformat",
                        "in": "query",
                        "description": "Sample time format. Default 'ISO 8601' [https://www.w3.org/TR/NOTE-datetime].",
                        "type": "string",
                        "default": "ISO8601",
                        "enum": ["ISO8601", "UNIX"],
                        "options": {
                            "enum_titles": ["ISO 8601", "Unix timestamp"]
                        }
                    },
                    {
                        "name": "transpose",
                        "in": "query",
                        "description": "Default false. Each data column is represented by an array under the 'column name' section. If true, data consists of an array where each sample is an object with all column values.",
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseTSValues"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Insert values for a timeseries",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries id",
                    "required": true,
                    "type": "string",
                    "format": "uuid",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "minLength": 1,
                    "example": "b0c77d19-5b6e-4162-9aa0-1073c48b9de0"
                }, {
                    "name": "insert",
                    "in": "query",
                    "description": "Insertion mode.\nIGNORE: Values corresponding to already stored timestamp will be ignored.\nUPDATE: Values corresponding to already stored timestamp will be updated",
                    "type": "string",
                    "enum": ["IGNORE", "UPDATE"],
                    "default": "IGNORE"
                }, {
                    "name": "update_last_time",
                    "in": "query",
                    "description": "If TRUE: update timeseries 'last_time' info. FALSE recommended for historical data ingestion (recovery)",
                    "type": "boolean",
                    "default": true
                }, {
                    "name": "chunked",
                    "in": "query",
                    "description": "If TRUE: records will be ingested into the database in several chunks (default 10000 records per chunk)",
                    "type": "boolean",
                    "default": true
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Timeseries_values_post"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "202": {
                        "description": "Values inserted, but not update timeseries 'last_time' info",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "timeseries"
                ],
                "summary": "Delete timeseries values by ID using a specified range time",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Timeseries ID",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                },{
                    "name": "newer_than",
                    "in": "query",
                    "description": "Delete all values that are newer than this date. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                },
                {
                    "name": "older_than",
                    "in": "query",
                    "description": "Delete all values that are older than this date. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                }, {
                    "name": "update_last_time",
                    "in": "query",
                    "description": "If TRUE: update timeseries 'last_time' info. FALSE recommended for historical data ingestion (recovery)",
                    "type": "boolean",
                    "default": true
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "206": {
                        "description": "Partial content",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "409": {
                        "description": "Conflict - Error"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/timeseries/uploadFromFile": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "description": "This end-point allows to upload a CSV file containing timeseries values.<br>Follow instructions at https://github.com/ingv-oe-dev/tsdsystem/wiki/4.-How-to-start#csv-file-structure.<br><b>IMPORTANT</b>: no 'update_last_time' is performed by this end-point. To force the update of timeseries statistics after loading data, use the specific end-point '/timeseries/{id}/update_stats'.",
                "operationId": "uploadFile",
                "parameters": [{
                    "name": "id",
                    "in": "formData",
                    "description": "The unique identifier (**uuid**) of the registered timeseries related to the uploading data",
                    "minLength": 1,
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    "type": "string"
                }, {
                    "name": "insert",
                    "in": "formData",
                    "description": "Insertion mode.\nIGNORE: Values corresponding to already stored timestamp will be ignored.\nUPDATE: Values corresponding to already stored timestamp will be updated",
                    "type": "string",
                    "enum": ["IGNORE", "UPDATE"],
                    "default": "IGNORE"
                }, {
                    "name": "schema",
                    "in": "formData",
                    "description": "The name of the schema where timeseries tables will be archived.\n**NOTE**: **ignored** if timeseries _id_ is defined. It will be used if uploading data set up a new timeseries registration.",
                    "minLength": 1,
                    "default": "public",
                    "type": "string"
                }, {
                    "name": "name",
                    "in": "formData",
                    "description": "The name of the timeseries.\n**NOTE**: **ignored** if timeseries _id_ is defined. It will be used if uploading data set up a new timeseries registration.",
                    "type": "string",
                    "minLength": 1,
                    "default": "test"
                }, {
                    "name": "sampling",
                    "in": "formData",
                    "description": "Timeseries values sampling in seconds.\n**NOTE**: **ignored** if timeseries _id_ is defined. It will be used if uploading data set up a new timeseries registration.",
                    "required": false,
                    "type": "number",
                    "minimum": 1,
                    "default": 60
                }, {
                    "name": "public",
                    "in": "formData",
                    "description": "Public timeseries.\n**NOTE**: **ignored** if timeseries _id_ is defined. It will be used if uploading data set up a new timeseries registration.",
                    "required": false,
                    "type": "boolean",
                    "default": true
                }, {
                    "name": "with_tz",
                    "in": "formData",
                    "description": "Specify if the timeseries timestamps are with timezone or not (if not, times are intended as UTC).\n**NOTE**: **ignored** if timeseries _id_ is defined. It will be used if uploading data set up a new timeseries registration.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "description": "file to upload",
                    "in": "formData",
                    "name": "file",
                    "required": true,
                    "type": "file"
                }, {
                    "name": "delimiter",
                    "in": "formData",
                    "description": "Delimiter for CSV file",
                    "required": false,
                    "minLength": 1,
                    "default": ",",
                    "type": "string"
                }],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "202": {
                        "description": "Values inserted, but not update timeseries 'last_time' info",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [{
                    "Bearer": []
                }],
                "summary": "Upload a CSV file",
                "tags": [
                    "timeseries"
                ]
            }
        },
        "/channels": {
            "get": {
                "tags": [
                    "channels"
                ],
                "summary": "Find channels",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "id",
                        "in": "query",
                        "description": "Channel unique identifier",
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Channel name",
                        "type": "string"
                    },
                    {
                        "name": "station_id",
                        "in": "query",
                        "description": "ID of the station whom the channel belongs to",
                        "type": "integer"
                    },
                    {
                        "name": "station_name",
                        "in": "query",
                        "description": "Name of the station whom the channel belongs to",
                        "type": "string"
                    },
                    {
                        "name": "sensortype_id",
                        "in": "query",
                        "description": "ID of the sensortype of the channel",
                        "type": "integer"
                    },
                    {
                        "name": "sensortype_name",
                        "in": "query",
                        "description": "Name of the sensortype of the channel",
                        "type": "string"
                    },
                    {
                        "name": "net_id",
                        "in": "query",
                        "description": "ID of the net whom the channel refers to",
                        "type": "integer"
                    },
                    {
                        "name": "net_name",
                        "in": "query",
                        "description": "Name of the net whom the channel refers to",
                        "type": "string"
                    },
                    {
                        "name": "start_datetime",
                        "in": "query",
                        "description": "Limit search on instances that are active on or after the specified start datetime. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "end_datetime",
                        "in": "query",
                        "description": "Limit search on instances that are active on or before the specified end datetime. Standard ISO8601 datetime UTC",
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "description": "Find this string into channel's metadata",
                        "type": "string"
                    },
                    {
                        "name": "info",
                        "in": "query",
                        "description": "Find this string into channel's additional info",
                        "type": "string"
                    },
                    {
                        "name": "exact_match",
                        "in": "query",
                        "description": "Use exact match when filtering by query parameters",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "channels"
                ],
                "summary": "Register a channel",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Channel"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/channels/{id}": {
            "get": {
                "tags": [
                    "channels"
                ],
                "summary": "Info about a channel by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Channel ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "channels"
                ],
                "summary": "Update channel data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Channel ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Channel"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "channels"
                ],
                "summary": "Delete a channel by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Channel ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/channels/{id}/timeseries": {
            "get": {
                "tags": [
                    "channels", "timeseries"
                ],
                "summary": "List all timeseries referring to a channel by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                        "name": "id",
                        "in": "path",
                        "description": "Channel ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "listCol",
                        "in": "query",
                        "description": "Show timeseries column names list in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "showColDefs",
                        "in": "query",
                        "description": "Show timeseries columns definitions in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "showMapping",
                        "in": "query",
                        "description": "Add timeseries mapped channels list in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "showFirstMapping",
                        "in": "query",
                        "description": "Add list of first net/sensor/channel id mapped to the timeseries in the response. **Only when 'id' input is specified**",
                        "type": "boolean"
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "How to sort result",
                        "type": "string",
                        "default": "name",
                        "enum": ["id", "name", "sampling"]
                    },
                    {
                        "name": "public",
                        "in": "query",
                        "description": "If not set, list all timeseries. If true, list only public timeseries (**no authorization required**), else only non-public timeseries.",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensors": {
            "get": {
                "tags": [
                    "sensors"
                ],
                "summary": "Find sensors",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Sensor unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Sensor name",
                    "type": "string"
                }, {
                    "name": "serial_number",
                    "in": "query",
                    "description": "Sensor serial number",
                    "type": "string"
                }, {
                    "name": "sensortype_id",
                    "in": "query",
                    "description": "ID of the sensortype",
                    "type": "integer"
                }, {
                    "name": "sensortype_name",
                    "in": "query",
                    "description": "Sensortype name",
                    "type": "string"
                }, {
                    "name": "sensortype_model",
                    "in": "query",
                    "description": "Sensortype name",
                    "type": "string"
                }, {
                    "name": "sensortype_components",
                    "in": "query",
                    "description": "Sensortype components",
                    "type": "string"
                }, {
                    "name": "additional_info",
                    "in": "query",
                    "description": "Find this string into sensors's additional info",
                    "type": "string"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name", "sensortype_id", "sensortype_name", "sensortype_model"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "sensors"
                ],
                "summary": "Register a sensor",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensor"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensors/{id}": {
            "get": {
                "tags": [
                    "sensors"
                ],
                "summary": "Info about a sensor by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensor ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "sensors"
                ],
                "summary": "Update sensor data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensor ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensor"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "sensors"
                ],
                "summary": "Delete a sensor by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensor ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/digitizers": {
            "get": {
                "tags": [
                    "digitizers"
                ],
                "summary": "Find digitizers",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Digitizer unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Digitizer name",
                    "type": "string"
                }, {
                    "name": "serial_number",
                    "in": "query",
                    "description": "Digitizer serial number",
                    "type": "string"
                }, {
                    "name": "digitizertype_id",
                    "in": "query",
                    "description": "ID of the digitizertype",
                    "type": "integer"
                }, {
                    "name": "digitizertype_name",
                    "in": "query",
                    "description": "Digitizertype name",
                    "type": "string"
                }, {
                    "name": "additional_info",
                    "in": "query",
                    "description": "Find this string into sensors's additional info",
                    "type": "string"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name", "digitizertype_id"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "digitizers"
                ],
                "summary": "Register a digitizer",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Digitizer"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/digitizers/{id}": {
            "get": {
                "tags": [
                    "digitizers"
                ],
                "summary": "Info about a digitizer by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Digitizer ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "digitizers"
                ],
                "summary": "Update digitizer data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Digitizer ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Digitizer"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "digitizers"
                ],
                "summary": "Delete a digitizer by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Digitizer ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortypes": {
            "get": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Find sensortypes",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Sensortype unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Sensortype name",
                    "type": "string"
                }, {
                    "name": "model",
                    "in": "query",
                    "description": "Sensortype model",
                    "type": "string"
                }, {
                    "name": "components",
                    "in": "query",
                    "description": "Find this string into sensortype components",
                    "type": "string"
                }, {
                    "name": "response_parameters",
                    "in": "query",
                    "description": "Find this string into sensortype response parameters",
                    "type": "string"
                }, {
                    "name": "additional_info",
                    "in": "query",
                    "description": "Find this string into sensortype additional info",
                    "type": "string"
                }, {
                    "name": "sensortype_category_id",
                    "in": "query",
                    "description": "Sensortype category unique identifier",
                    "type": "integer"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name", "model", "sensortype_category_id"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Register an sensortype",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensortype"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortypes/{id}": {
            "get": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Info about a sensortype by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Update sensortypes data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Sensortype"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "sensortypes"
                ],
                "summary": "Delete a sensortype by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortypes/{id}/sensors": {
            "get": {
                "tags": [
                    "sensors", "sensortypes"
                ],
                "summary": "List all current sensors belonging to a sensortype by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortype_categories": {
            "get": {
                "tags": [
                    "sensortype_categories"
                ],
                "summary": "Find sensortype categories",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Sensortype category unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Sensortype category name",
                    "type": "string"
                }, {
                    "name": "json_schema",
                    "in": "query",
                    "description": "Find this string into sensortype category JSON schema",
                    "type": "string"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "sensortype_categories"
                ],
                "summary": "Register a sensortype category",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/SensortypeCategory"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortype_categories/{id}": {
            "get": {
                "tags": [
                    "sensortype_categories"
                ],
                "summary": "Info about a sensortype category by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype category ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "sensortype_categories"
                ],
                "summary": "Update sensortype category data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype category ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/SensortypeCategory"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "sensortype_categories"
                ],
                "summary": "Delete a sensortype category by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype caterogy ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sensortype_categories/{id}/sensortypes": {
            "get": {
                "tags": [
                    "sensortypes", "sensortype_categories"
                ],
                "summary": "List all sensortypes belonging to a sensortype category by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Sensortype category ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/digitizertypes": {
            "get": {
                "tags": [
                    "digitizertypes"
                ],
                "summary": "Find digitizertypes",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Digitizertype unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Sensortype name",
                    "type": "string"
                }, {
                    "name": "model",
                    "in": "query",
                    "description": "Sensortype model",
                    "type": "string"
                }, {
                    "name": "additional_info",
                    "in": "query",
                    "description": "Find this string into sensortype additional info",
                    "type": "string"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name", "model"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "digitizertypes"
                ],
                "summary": "Register an digitizertype",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Digitizertype"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/digitizertypes/{id}": {
            "get": {
                "tags": [
                    "digitizertypes"
                ],
                "summary": "Info about a digitizertype by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Digitizertype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "digitizertypes"
                ],
                "summary": "Update digitizertypes data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Digitizertype ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Digitizertype"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "digitizertypes"
                ],
                "summary": "Delete a digitizertype by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Digitizertype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/digitizertypes/{id}/digitizers": {
            "get": {
                "tags": [
                    "digitizers", "digitizertypes"
                ],
                "summary": "List all current digitizers belonging to a digitizertype by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Digitizertype ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/stations": {
            "get": {
                "tags": [
                    "stations"
                ],
                "summary": "Find stations",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Station unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Station name",
                    "type": "string"
                }, {
                    "name": "sensortype_id",
                    "in": "query",
                    "description": "ID of the sensortype",
                    "type": "integer"
                }, {
                    "name": "sensortype_name",
                    "in": "query",
                    "description": "Sensortype name",
                    "type": "string"
                }, {
                    "name": "net_id",
                    "in": "query",
                    "description": "ID of the net whom the station refers to",
                    "type": "integer"
                }, {
                    "name": "net_name",
                    "in": "query",
                    "description": "Name of the net whom the station refers to",
                    "type": "string"
                }, {
                    "name": "site_id",
                    "in": "query",
                    "description": "ID of the site whom the station belongs to",
                    "type": "integer"
                }, {
                    "name": "site_name",
                    "in": "query",
                    "description": "Name of the site whom the station belongs to",
                    "type": "string"
                }, {
                    "name": "start_datetime",
                    "in": "query",
                    "description": "Limit search on instances that are active on or after the specified start datetime. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                }, {
                    "name": "end_datetime",
                    "in": "query",
                    "description": "Limit search on instances that are active on or before the specified end datetime. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                }, {
                    "name": "additional_info",
                    "in": "query",
                    "description": "Find this string into station's additional info",
                    "type": "string"
                }, {
                    "name": "minlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify southern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify northern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify western boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify eastern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "latitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central latitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "longitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central longitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name", "start_datetime", "end_datetime"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "stations"
                ],
                "summary": "Register a station",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Station"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/stations/{id}": {
            "get": {
                "tags": [
                    "stations"
                ],
                "summary": "Info about a station by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "stations"
                ],
                "summary": "Update station data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Station"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "stations"
                ],
                "summary": "Delete a station by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/stations/{id}/configs": {
            "get": {
                "tags": [
                    "stations"
                ],
                "summary": "List all configurations referring to a station by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/stations/{id}/channels": {
            "get": {
                "tags": [
                    "stations", "channels"
                ],
                "summary": "List all channels referring to a station by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/stations/configs": {
            "get": {
                "tags": [
                    "stations"
                ],
                "summary": "Find stations' configurations",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Station configuration unique identifier",
                    "type": "integer"
                }, {
                    "name": "station_id",
                    "in": "query",
                    "description": "Station unique identifier",
                    "type": "integer"
                }, {
                    "name": "station_name",
                    "in": "query",
                    "description": "Station name",
                    "type": "string"
                }, {
                    "name": "sensor_id",
                    "in": "query",
                    "description": "ID of the sensor",
                    "type": "integer"
                }, {
                    "name": "sensor_name",
                    "in": "query",
                    "description": "Sensor name",
                    "type": "string"
                }, {
                    "name": "digitizer_id",
                    "in": "query",
                    "description": "ID of the digitizer",
                    "type": "integer"
                }, {
                    "name": "digitizer_name",
                    "in": "query",
                    "description": "Name of the digitizer",
                    "type": "string"
                }, {
                    "name": "start_datetime",
                    "in": "query",
                    "description": "Limit search on instances that are active on or after the specified start datetime. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                }, {
                    "name": "end_datetime",
                    "in": "query",
                    "description": "Limit search on instances that are active on or before the specified end datetime. Standard ISO8601 datetime UTC",
                    "type": "string",
                    "format": "date-time"
                }, {
                    "name": "additional_info",
                    "in": "query",
                    "description": "Find this string into station configuration's additional info",
                    "type": "string"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "start_datetime",
                    "enum": ["id", "station_id", "sensor_id", "digitizer_id", "station_name", "sensor_name", "digitizer_name", "start_datetime", "end_datetime"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "stations"
                ],
                "summary": "Register a station configuration",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/StationConfig"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/stations/configs/{id}": {
            "get": {
                "tags": [
                    "stations"
                ],
                "summary": "Info about a station configuration by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station configuration ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "stations"
                ],
                "summary": "Update station configuration data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station configuration ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/StationConfig"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "stations"
                ],
                "summary": "Delete a station configuration by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station configuration ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/stations/configs/{id}/channels": {
            "get": {
                "tags": [
                    "channels", "stations"
                ],
                "summary": "List all channels referring to a station configuration by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Station Configuration ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/nets": {
            "get": {
                "tags": [
                    "nets"
                ],
                "summary": "Find nets",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Net unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Net name",
                    "type": "string"
                }, {
                    "name": "owner_id",
                    "in": "query",
                    "description": "ID of the owner",
                    "type": "integer"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "nets"
                ],
                "summary": "Register a net",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Net"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/nets/{id}": {
            "get": {
                "tags": [
                    "nets"
                ],
                "summary": "Info about a net by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "nets"
                ],
                "summary": "Update net data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Net"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "nets"
                ],
                "summary": "Delete a net by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/nets/{id}/stations": {
            "get": {
                "tags": [
                    "nets", "stations"
                ],
                "summary": "List all stations belonging to a net by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Net ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sites": {
            "get": {
                "tags": [
                    "sites"
                ],
                "summary": "Find sites",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Site unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Site name",
                    "type": "string"
                }, {
                    "name": "info",
                    "in": "query",
                    "description": "Find this string into sites's additional info",
                    "type": "string"
                }, {
                    "name": "minlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify southern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlatitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify northern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify western boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxlongitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify eastern boundary for search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "latitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central latitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "longitude",
                    "in": "query",
                    "description": "**Spatial search**. Specify the central longitude point for a radial search.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradius",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Degrees.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "minradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify minimum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "maxradiuskm",
                    "in": "query",
                    "description": "**Spatial search**. Specify maximum distance from the geographic point defined by latitude and longitude. Kilometers.",
                    "type": "number",
                    "format": "double"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "sites"
                ],
                "summary": "Register a site",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input. **Insert coordinates in this order: [lon, lat]**",
                    "required": true,
                    "schema": {
                        "$ref": "../json-schemas/sites.json"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sites/{id}": {
            "get": {
                "tags": [
                    "sites"
                ],
                "summary": "Info about a site by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "sites"
                ],
                "summary": "Update site data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "../json-schemas/sites.json"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "sites"
                ],
                "summary": "Delete a site by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/sites/{id}/stations": {
            "get": {
                "tags": [
                    "sites", "stations"
                ],
                "summary": "List all stations belonging to a site by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Site ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/owners": {
            "get": {
                "tags": [
                    "owners"
                ],
                "summary": "Find owners",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Owner unique identifier",
                    "type": "integer"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Net name",
                    "type": "string"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "owners"
                ],
                "summary": "Register an owner",
                "description": "",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Owner"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "207": {
                        "description": "Already exists. No Rows inserted",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Authorization not found"
                    },
                    "409": {
                        "description": "Operation failed"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/owners/{id}": {
            "get": {
                "tags": [
                    "owners"
                ],
                "summary": "Info about an owner by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "owners"
                ],
                "summary": "Update owner data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Owner"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "owners"
                ],
                "summary": "Delete an owner by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/owners/{id}/nets": {
            "get": {
                "tags": [
                    "nets", "owners"
                ],
                "summary": "List all nets belonging to an owner by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Owner ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "description": "You can filter list by specifing ID, email. The result show records of registered (and confirmed) users only",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "email",
                    "in": "query",
                    "description": "User email",
                    "type": "string"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Info about user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/User"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}/confirm": {
            "patch": {
                "tags": [
                    "users"
                ],
                "summary": "Confirm user registration by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}/permissions": {
            "get": {
                "tags": ["users", "permissions"],
                "summary": "Get permissions issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "merge_with_role_permissions",
                    "in": "query",
                    "description": "Merge with permissions of the user's roles",
                    "type": "boolean",
                    "default": true
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": ["users", "permissions"],
                "summary": "Define a new permission for a specific user identified by ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "active",
                    "in": "query",
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Permission_no_role_id"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": ["users", "permissions"],
                "summary": "Remove all permissions for a user by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}/roles": {
            "get": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Get roles issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/users/{id}/roles/{role_id}": {
            "get": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Get a role by ID issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "role_id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Assign a Role by ID to a User by ID (or update if the couple [Role ID, User ID] exists)",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "role_id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "priority",
                    "in": "query",
                    "description": "Assign a priority",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "users", "roles"
                ],
                "summary": "Remove a mapping between a Role and a User defined by the couple [Role ID, User ID]",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "role_id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "List roles",
                "description": "You can filter list by specifing ID, name or description",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "query",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "name",
                    "in": "query",
                    "description": "Role name",
                    "type": "string"
                }, {
                    "name": "description",
                    "in": "query",
                    "description": "Role description",
                    "type": "string"
                }, {
                    "name": "exact_match",
                    "in": "query",
                    "description": "Use exact match when filtering by query parameters",
                    "type": "boolean"
                }, {
                    "name": "sort_by",
                    "in": "query",
                    "description": "How to sort result",
                    "type": "string",
                    "default": "name",
                    "enum": ["id", "name"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Create a new role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "title": "Name",
                                "description": "Name",
                                "type": "string",
                                "minLength": 1,
                                "required": true
                            },
                            "description": {
                                "title": "Description",
                                "type": "string"
                            }
                        }
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Info about a role by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "patch": {
                "tags": [
                    "roles"
                ],
                "summary": "Update name and/or description of a role by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "title": "Name",
                                "description": "Name",
                                "type": "string",
                                "minLength": 1
                            },
                            "description": {
                                "title": "Description",
                                "type": "string"
                            }
                        }
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Delete a role by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}/members": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get all users belonging to a role by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}/members/{member_id}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get a role by ID issued to a user by ID",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Assign a Role by ID to a User by ID (or update if the couple [Role ID, User ID] exists)",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "priority",
                    "in": "query",
                    "description": "Assign a priority",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Remove a mapping between a Role and a User defined by the couple [Role ID, User ID]",
                "description": "",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "path",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/{id}/permissions": {
            "get": {
                "tags": ["roles", "permissions"],
                "summary": "Get permissions for a role by ID",
                "description": "Alternative of **/permissions/{role_type}/{role_id}**, where **{role_type}** = 'role' and **{role_id}** = {id}",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": ["roles", "permissions"],
                "summary": "Define a new permission for a specific role identified by ID",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "active",
                    "in": "query",
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Permission_no_role_id"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": ["roles", "permissions"],
                "summary": "Remove all permissions for a role by ID",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/roles/mapping": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Get all mappings between roles and users",
                "description": "You can filter list by specifing a Role ID, a User ID or the Priority (if a User belongs to more than one roles).",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "role_id",
                    "in": "query",
                    "description": "Role ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "member_id",
                    "in": "query",
                    "description": "User ID",
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "priority",
                    "in": "query",
                    "description": "Priority of the role",
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Assign a Role by ID to a User by ID (or update if the couple [Role ID, User ID] exists)",
                "description": "You have to define a Role ID, a User ID and a Priority (if a User belongs to more than one roles).",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "role_id": {
                                "title": "Role ID",
                                "type": "integer",
                                "required": true,
                                "format": "int64"
                            },
                            "member_id": {
                                "title": "User ID",
                                "type": "integer",
                                "required": true,
                                "format": "int64"
                            },
                            "priority": {
                                "title": "Priority",
                                "required": false,
                                "type": "integer",
                                "format": "int64"
                            }
                        }
                    }
                }],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "params": {
                                    "type": "object"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ApiResponse"
                                    }
                                },
                                "error": {
                                    "type": "object"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "format": "int32"
                                },
                                "records": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Remove a mapping between a Role and a User defined by the couple [Role ID, User ID]",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "JSON object that needs to be passed as input to remove a mapping",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                            "role_id": {
                                "title": "Role ID",
                                "type": "integer",
                                "format": "int64",
                                "required": true
                            },
                            "member_id": {
                                "title": "User ID",
                                "type": "integer",
                                "format": "int64",
                                "required": true
                            }
                        }
                    }
                }],
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/permissions/{role_type}": {
            "get": {
                "tags": ["permissions"],
                "summary": "List all defined permissions by role type",
                "produces": ["application/json"],
                "parameters": [{
                    "name": "role_type",
                    "in": "path",
                    "description": "Role type",
                    "required": true,
                    "type": "string",
                    "enum": ["member", "role"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": ["permissions"],
                "summary": "Remove all permissions for a {role_type} in [member | role]",
                "produces": ["application/json"],
                "parameters": [{
                    "name": "role_type",
                    "in": "path",
                    "description": "Role type",
                    "required": true,
                    "type": "string",
                    "enum": ["member", "role"]
                }],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/permissions/{role_type}/{role_id}": {
            "get": {
                "tags": ["permissions"],
                "summary": "Get permissions by a specific role type with a specific role ID",
                "produces": ["application/json"],
                "parameters": [{
                        "name": "role_type",
                        "in": "path",
                        "description": "Role type",
                        "required": true,
                        "type": "string",
                        "enum": ["member", "role"]
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            },
            "delete": {
                "tags": ["permissions"],
                "summary": "Remove all permissions by a specific role type with a specific role ID",
                "produces": ["application/json"],
                "parameters": [{
                        "name": "role_type",
                        "in": "path",
                        "description": "Role type",
                        "required": true,
                        "type": "string",
                        "enum": ["member", "role"]
                    },
                    {
                        "name": "role_id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponseGet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "401": {
                        "description": "Authorization not found"
                    }
                },
                "security": [{
                    "Bearer": []
                }]
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "about"
                ],
                "summary": "Get web service version",
                "description": "Returns a string containing web service version",
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/swagger.json": {
            "get": {
                "tags": [
                    "about"
                ],
                "summary": "Get swagger.json",
                "description": "Returns swagger.json file content.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/schemas/v2.0/schema.json"
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "name": "Authorization",
            "in": "header"
        }
    },
    "definitions": {
        "ApiResponse": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "object"
                },
                "data": {
                    "type": "object"
                },
                "error": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ApiResponseGet": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "object"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "error": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "integer",
                    "format": "int32"
                },
                "records": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ApiResponseTSValues": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "object"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "error": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "integer"
                },
                "records": {
                    "type": "integer"
                },
                "additionalInfo": {
                    "type": "object"
                }
            }
        },
        "Timeseries": {
            "type": "object",
            "required": ["schema", "name"],
            "additionalProperties": false,
            "properties": {
                "schema": {
                    "title": "Schema",
                    "description": "The name of the schema where timeseries tables will be archived",
                    "type": "string",
                    "minLength": 1,
                    "default": "public",
                    "required": true
                },
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1,
                    "default": "test",
                    "required": true
                },
                "sampling": {
                    "title": "Sampling",
                    "description": "Timeseries values sampling in seconds",
                    "type": "number",
                    "minimum": 1,
                    "default": 60
                },
                "columns": {
                    "title": "Columns",
                    "description": "List of all the measurements of the timeseries",
                    "type": "array",
                    "format": "table",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                        "$ref": "#/definitions/Column_def"
                    }
                },
                "mapping": {
                    "title": "Mapping",
                    "description": "List of all channels related to the timeseries",
                    "type": "object",
                    "required": ["channel_id", "add_channel_mode", "channel_list"],
                    "format": "grid-strict",
                    "properties": {
                        "channel_id": {
                            "title": "Channel IDs",
                            "description": "ID list of channels to which the timeseries is related.",
                            "type": "array",
                            "format": "table",
                            "uniqueItems": true,
                            "items": {
                                "type": "integer"
                            },
                            "options": {
                                "grid_columns": 5
                            },
                            "default": []
                        }
                    }
                },
                "metadata": {
                    "title": "Metadata",
                    "description": "Metadata for the timeseries",
                    "type": "object",
                    "additionalProperties": true
                },
                "public": {
                    "title": "Public",
                    "description": "If not set, list all timeseries. If true, list only public timeseries (**no authorization required**), else only non-public timeseries.",
                    "type": "boolean",
                    "default": true
                },
                "with_tz": {
                    "title": "Timezone",
                    "description": "Specify if the timeseries timestamps are with timezone or not (if not, times are intended as UTC)",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "Timeseries_patch": {
            "type": "object",
            "required": ["schema", "name"],
            "additionalProperties": false,
            "properties": {
                "metadata": {
                    "title": "Metadata",
                    "description": "Metadata for the timeseries",
                    "type": "object",
                    "properties": {
                        "columns": {
                            "title": "Columns",
                            "description": "List of all the measurements of the timeseries",
                            "type": "array",
                            "minItems": 1,
                            "uniqueItems": true,
                            "items": {
                                "$ref": "#/definitions/Column_def"
                            },
                            "options": {
                                "disable_array_add": true,
                                "disable_array_delete": true,
                                "disable_array_reorder": true
                            }
                        }
                    },
                    "additionalProperties": true
                },
                "sampling": {
                    "title": "Sampling",
                    "description": "Timeseries values sampling in seconds",
                    "type": "number",
                    "minimum": 1,
                    "default": 60
                },
                "mapping": {
                    "title": "Mapping",
                    "description": "List of all channels related to the timeseries",
                    "type": "object",
                    "required": ["channel_id", "add_channel_mode", "channel_list"],
                    "format": "grid-strict",
                    "properties": {
                        "channel_id": {
                            "title": "Channel IDs",
                            "description": "ID list of channels to which the timeseries is related.",
                            "type": "array",
                            "format": "table",
                            "uniqueItems": true,
                            "items": {
                                "type": "integer"
                            },
                            "options": {
                                "grid_columns": 5
                            },
                            "default": []
                        },
                        "force": {
                            "title": "Force update",
                            "description": "[If true] Delete old mapping list and replace with the channel_id list",
                            "type": "boolean",
                            "default": false
                        }
                    }
                },
                "public": {
                    "title": "Public",
                    "description": "Public timeseries",
                    "type": "boolean"
                }
            }
        },
        "Timeseries_values_post": {
            "type": "object",
            "required": ["schema", "name"],
            "additionalProperties": false,
            "properties": {
                "columns": {
                    "title": "Columns",
                    "description": "Ordered list of columns names. **It has to include the _time_ column**",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "default": "time"
                    },
                    "minItems": 2,
                    "uniqueItems": true,
                    "required": true,
                    "example": ["time", "value"]
                },
                "data": {
                    "title": "Data",
                    "description": "Each record follow the order defined in _Columns_",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {}
                    },
                    "required": true,
                    "example": [
                        ["2022-10-28 15:26:00", 100],
                        ["2022-10-28 15:27:00", 10],
                        ["2022-10-28 15:28:00", null]
                    ]
                }
            }
        },
        "Channel": {
            "type": "object",
            "required": ["sensor_id", "name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "station_config_id": {
                    "title": "Station configuration",
                    "description": "Station configuration to which the channel belongs",
                    "type": "integer",
                    "minimum": 1
                },
                "additional_info": {
                    "title": "Additional info",
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                        "Depth": {
                            "title": "Depth",
                            "description": "Depth property also used in FDSN Station XML. The depth of the sensor relative to the local ground surface level, in meters",
                            "type": ["null", "number"],
                            "default": 0
                        },
                        "Azimuth": {
                            "title": "Azimuth",
                            "description": "Azimuth property also used in FDSN Station XML. Azimuth of the component in degrees clockwise from geographic (true) north.",
                            "type": ["null", "number"],
                            "minimum": 0,
                            "maximum": 360
                        },
                        "Dip": {
                            "title": "Dip",
                            "description": "Dip property also used in FDSN Station XML. Dip of the component in degrees, positive is down from horizontal. For horizontal dip=0, for vertical upwards dip=-90 and for vertical downwards dip=+90.",
                            "type": ["null", "number"],
                            "minimum": -90,
                            "maximum": 90
                        },
                        "SampleRate": {
                            "title": "SampleRate",
                            "description": "SampleRate property also used in FDSN Station XML. Sample rate in samples per second. If not specified, the sample rate of the digitizer will be used on FDSN Station XML.",
                            "type": ["null", "number"]
                        },
                        "ClockDrift": {
                            "title": "ClockDrift",
                            "description": "ClockDrift property also used in FDSN Station XML. Tolerance value, measured in seconds per sample, used as a threshold for time error detection in data from the channel.",
                            "type": ["null", "number"],
                            "minimum": 0
                        },
                        "restrictedStatus": {
                            "title": "restrictedStatus",
                            "description": "restrictedStatus property also used in FDSN Station XML.",
                            "type": "string",
                            "enum": ["open", "closed", "partial"],
                            "default": "open"
                        }
                    }
                }
            }
        },
        "Digitizer": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "serial_number": {
                    "title": "Serial number",
                    "description": "Serial number",
                    "type": "string"
                },
                "digitizertype_id": {
                    "title": "Digitizertype",
                    "type": "integer"
                },
                "additional_info": {
                    "title": "Additional Info",
                    "description": "Additional info",
                    "type": "object"
                }
            }
        },
        "Digitizertype": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "model": {
                    "title": "Model",
                    "description": "Model",
                    "type": "string"
                },
                "final_sample_rate": {
                    "title": "Final sample rate",
                    "description": "Sample rate in samples per second",
                    "type": "number"
                },
                "final_sample_rate_measure_unit": {
                    "title": "Final sample rate measure unit",
                    "type": "string",
                    "default": "Hz"
                },
                "sensitivity": {
                    "title": "Sensitivity",
                    "type": "number"
                },
                "sensitivity_measure_unit": {
                    "title": "Sensitivity measure unit",
                    "type": "string"
                },
                "dynamical_range": {
                    "title": "Dynamical range",
                    "type": "number"
                },
                "dynamical_range_measure_unit": {
                    "title": "Dynamical range measure unit",
                    "type": "string"
                },
                "additional_info": {
                    "title": "Additional Info",
                    "description": "Additional info",
                    "properties": {
                        "responseXML": {
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "propertyOrder": 8
                }
            }
        },
        "Sensor": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "serial_number": {
                    "title": "Serial number",
                    "description": "Serial number",
                    "type": "string"
                },
                "sensortype_id": {
                    "title": "Sensortype",
                    "type": "integer"
                },
                "additional_info": {
                    "title": "Additional Info",
                    "description": "Additional info",
                    "type": "object"
                }
            }
        },
        "Sensortype": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "model": {
                    "title": "Model",
                    "description": "Model",
                    "type": "string",
                    "minLength": 1
                },
                "components": {
                    "title": "Components",
                    "description": "List of the components of the sensortype",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sensortype_category_id": {
                    "title": "Sensortype category",
                    "type": "integer",
                    "enum": [],
                    "options": {
                        "enum_titles": []
                    }
                },
                "response_parameters": {
                    "title": "Response parameters",
                    "description": "Response parameters structure based on the JSON schema of the selected sensortype category",
                    "type": "object"
                },
                "additional_info": {
                    "title": "Additional info",
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "SensortypeCategory": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "json_schema": {
                    "title": "JSON schema",
                    "description": "JSON schema for sensortype response parameters",
                    "type": "object"
                }
            }
        },
        "Station": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "lat": {
                    "title": "Latitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "lon": {
                    "title": "Longitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "quote": {
                    "title": "Quote",
                    "description": "In meters",
                    "type": "number",
                    "format": "double"
                },
                "net_id": {
                    "title": "Net ID",
                    "description": "ID of the net whom the channel refers to",
                    "type": "integer"
                },
                "site_id": {
                    "title": "Site ID",
                    "description": "ID of the site whom the channel belongs to",
                    "type": "integer"
                },
                "additional_info": {
                    "title": "Additional properties",
                    "description": "Additional properties",
                    "type": "object",
                    "properties": {
                        "restrictedStatus": {
                            "title": "restrictedStatus",
                            "description": "restrictedStatus property also used in FDSN Station XML.",
                            "type": "string",
                            "enum": ["open", "closed", "partial"],
                            "default": "open"
                        }
                    }
                }
            }
        },
        "StationConfig": {
            "type": "object",
            "required": ["station_id", "start_datetime"],
            "properties": {
                "station_id": {
                    "title": "Station",
                    "description": "Station ID",
                    "type": "integer",
                    "enum": [],
                    "options": {
                        "enum_titles": []
                    },
                    "minimum": 1
                },
                "sensor_id": {
                    "title": "Sensor",
                    "description": "Sensor ID",
                    "type": "integer",
                    "enum": [],
                    "options": {
                        "enum_titles": []
                    },
                    "minimum": 1
                },
                "digitizer_id": {
                    "title": "Digitizer",
                    "description": "Digitizer ID",
                    "type": "integer",
                    "enum": [],
                    "options": {
                        "enum_titles": []
                    },
                    "minimum": 1
                },
                "additional_info": {
                    "title": "Additional info",
                    "type": "object",
                    "additionalProperties": true
                },
                "start_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "Start Datetime",
                    "description": "Standard ISO8601 datetime UTC",
                    "minLength": 1
                },
                "end_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "End Datetime",
                    "description": "Standard ISO8601 datetime UTC"
                }
            }
        },
        "Net": {
            "type": "object",
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "description": {
                    "title": "Description",
                    "description": "Description",
                    "type": "string"
                },
                "owner_id": {
                    "title": "Owner",
                    "description": "Set the onwer of the net",
                    "type": "integer"
                },
                "additional_info": {
                    "title": "Additional info",
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                        "startDate": {
                            "title": "startDate",
                            "description": "startDate property also used in FDSN Station XML. Start date of network. Standard ISO8601 datetime UTC",
                            "type": "string",
                            "format": "date-time"
                        },
                        "doi": {
                            "title": "DOI",
                            "description": "A type to document persistent identifiers. Identifier values should be specified without a URI scheme (prefix), instead the identifier type is documented as an attribute.",
                            "type": "string"
                        },
                        "restrictedStatus": {
                            "title": "restrictedStatus",
                            "description": "restrictedStatus property also used in FDSN Station XML.",
                            "type": "string",
                            "enum": ["open", "closed", "partial"],
                            "default": "open"
                        }
                    }
                }
            }
        },
        "Site": {
            "type": "object",
            "required": ["name"],
            "additionalProperties": false,
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                },
                "lat": {
                    "title": "Latitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "lon": {
                    "title": "Longitude",
                    "description": "Coordinate WGS84",
                    "type": "number",
                    "format": "double"
                },
                "quote": {
                    "title": "Quote",
                    "description": "In meters",
                    "type": "number",
                    "format": "double"
                },
                "info": {
                    "title": "Additional properties",
                    "description": "Additional properties",
                    "type": "object"
                }
            }
        },
        "Owner": {
            "type": "object",
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "registered": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        },
        "Permission": {
            "type": "object",
            "required": ["role_id", "settings"],
            "properties": {
                "role_id": {
                    "description": "Role ID",
                    "type": "integer"
                },
                "settings": {
                    "$ref": "../json-schemas/resource_permissions_swagger.json"
                },
                "active": {
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "Permission_no_role_id": {
            "type": "object",
            "required": ["settings"],
            "properties": {
                "settings": {
                    "$ref": "../json-schemas/resource_permissions_swagger.json"
                },
                "active": {
                    "description": "Set if the permission will be active immediately",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "Column_def": {
            "type": "object",
            "format": "grid",
            "required": ["name"],
            "properties": {
                "name": {
                    "type": "string",
                    "pattern": "^[a-z_]+[a-z0-9_]*$",
                    "title": "Name",
                    "minLength": 1,
                    "description": "Table column name (only lowercase letters, numbers and underscore characters admitted)"
                },
                "type": {
                    "title": "Field type",
                    "description": "Table column type",
                    "type": "string",
                    "minLength": 1,
                    "default": "double precision",
                    "enum": ["smallint", "integer", "double precision"],
                    "options": {
                        "enum_titles": ["smallint (2 bytes)", "integer (4 bytes)", "double precision (8 bytes)"]
                    }
                },
                "unit": {
                    "type": "string",
                    "title": "Measure unit",
                    "description": "Measure unit"
                },
                "plot_options": {
                    "$ref": "#/definitions/Plot_options"
                },
                "thresholds": {
                    "$ref": "#/definitions/Thresholds"
                }
            }
        },
        "Column_def_readonly": {
            "type": "object",
            "format": "grid",
            "required": ["name"],
            "properties": {
                "name": {
                    "type": "string",
                    "pattern": "^[a-z_]+[a-z0-9_]*$",
                    "title": "Name",
                    "minLength": 1,
                    "description": "Table column name (only lowercase letters, numbers and underscore characters admitted)",
                    "readOnly": true
                },
                "type": {
                    "title": "Field type",
                    "description": "Table column type",
                    "type": "string",
                    "minLength": 1,
                    "default": "double precision",
                    "enum": ["smallint", "integer", "double precision"],
                    "options": {
                        "enum_titles": ["smallint (2 bytes)", "integer (4 bytes)", "double precision (8 bytes)"]
                    },
                    "readOnly": true
                },
                "unit": {
                    "type": "string",
                    "title": "Measure unit",
                    "description": "Measure unit"
                },
                "plot_options": {
                    "$ref": "#/definitions/Plot_options"
                },
                "thresholds": {
                    "$ref": "#/definitions/Thresholds"
                }
            }
        },
        "Plot_options": {
            "type": "object",
            "format": "grid",
            "title": "Plot options",
            "description": "Plot options on graphing charts",
            "properties": {
                "axis_type": {
                    "description": "Sets the axis type. By default, attempts to determined the axis type by looking into the data of the traces that referenced the axis in question",
                    "type": "string",
                    "default": "linear",
                    "enum": ["linear", "log"]
                },
                "type": {
                    "description": "Chart type",
                    "type": "string",
                    "default": "scatter",
                    "enum": ["scatter", "bar"]
                },
                "mode": {
                    "description": "Type for scatter",
                    "type": "string",
                    "default": "markers",
                    "enum": ["lines", "markers", "lines+markers"]
                },
                "color": {
                    "description": "Color",
                    "type": "string",
                    "format": "color",
                    "default": "#000000",
                    "options": {
                        "ColorPicker": {
                            "format": "hex"
                        }
                    }
                }
            },
            "options": {
                "collapsed": true
            }
        },
        "Thresholds": {
            "type": "array",
            "format": "table",
            "title": "Thresholds",
            "description": "Thresholds used to define the status/level of the measurement",
            "items": {
                "type": "object",
                "format": "grid",
                "required": ["from_t", "to_t", "status", "label", "color"],
                "properties": {
                    "from_t": {
                        "description": "Start value",
                        "type": ["null", "number"],
                        "default": null
                    },
                    "to_t": {
                        "description": "End value",
                        "type": ["null", "number"],
                        "default": null
                    },
                    "status": {
                        "description": "Status/Level category (code)",
                        "type": "integer"
                    },
                    "label": {
                        "description": "Status/level category (label)",
                        "type": "string",
                        "minLength": 1
                    },
                    "color": {
                        "description": "Color",
                        "type": "string",
                        "format": "color",
                        "default": "#000000",
                        "options": {
                            "ColorPicker": {
                                "format": "hex"
                            }
                        }
                    }
                },
                "options": {
                    "collapsed": true
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}